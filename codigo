#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>

typedef struct {
    int codigo;
    char nome[100];
    char endereco[200];
    int telefone;
} cliente;

typedef struct {
    int codigo;
    char nome[100];
    int telefone;
    char cargo[100];
    float salario;
} funcionario;

typedef struct {
    int numero;
    int numero_hospedes;
    float valor_diario;
    char status[100]; // "ocupado" ou "desocupado"
} quarto;

typedef struct {
    int codigo;
    char data_entrada[100];
    char data_saida[200];
    int codigo_cliente;
    int numero_quarto;
} estadia;

cliente Clientes[100];
funcionario Funcionarios[100];
quarto Quartos[100];
estadia Estadias[100];

int numero_cliente = 0;
int numero_funcionario = 0;
int numero_quarto = 0;
int numero_estadia = 0;

int cadastro_de_cliente(int codigo, char nome[], char endereco[], int telefone) {
    int i;
    // Verifica se já existe
    for (i = 0; i < numero_cliente; i++) {
        if (Clientes[i].codigo == codigo) {
            printf("Cliente com código %d já existe.\n", codigo);
            return 0;
        }
    }
    cliente c;
    c.codigo = codigo;
    strcpy(c.nome, nome);
    strcpy(c.endereco, endereco);
    c.telefone = telefone;
    Clientes[numero_cliente++] = c;
    printf("Cliente %s cadastrado com sucesso.\n", nome);
    return 1;
}

int cadastro_de_funcionario(int codigo, char nome[], int telefone, char cargo[], float salario) {
    int i;
    for (i = 0; i < numero_funcionario; i++) {
        if (Funcionarios[i].codigo == codigo) {
            printf("Funcionário com código %d já existe.\n", codigo);
            return 0;
        }
    }
    funcionario f;
    f.codigo = codigo;
    strcpy(f.nome, nome);
    f.telefone = telefone;
    strcpy(f.cargo, cargo);
    f.salario = salario;
    Funcionarios[numero_funcionario++] = f;
    printf("Funcionário %s cadastrado com sucesso.\n", nome);
    return 1;
}

int cadastrar_quarto(int numero, int numero_hospedes, float valor_diario) {
    int i;

    for (i = 0; i < numero_quarto; i++) {
        if (Quartos[i].numero == numero) {
            printf("Quarto com número %d já existe.\n", numero);
            return 0;
        }
    }
    // Cria o quarto e adiciona ao array
    quarto q;
    q.numero = numero;
    q.numero_hospedes = numero_hospedes;
    q.valor_diario = valor_diario;
    strcpy(q.status, "desocupado");
    Quartos[numero_quarto++] = q;
    printf("Quarto %d cadastrado com sucesso.\n", numero);
    return 1;
}

int calcular_diarias(char data_entrada[], char data_saida[]) {
    int diae, mese, anoe; //entrada
    int diass, mess, anos; //saida

    // Extrai dia, mês e ano da data de entrada
    sscanf(data_entrada, "%d/%d/%d", &diae, &mese, &anoe);

    // Extrai dia, mês e ano da data de saída
    sscanf(data_saida, "%d/%d/%d", &diass, &mess, &anos);

    // Converte as datas para o formato de dias desde uma data base (simples, mas impreciso)
    int diae_em_dias = anoe * 365 + mese * 30 + diae;
    int diass_em_dias = anos * 365 + mess * 30 + diass;

    // Calcula o número de dias entre as duas datas
    return diass_em_dias - diae_em_dias;
}

int verificar_disponibilidade_quarto(int numero_quarto, char data_entrada[], char data_saida[]) {
    int i;
    for (i = 0; i < numero_estadia; i++) {
        if (Estadias[i].numero_quarto == numero_quarto) {
            int dia_entrada_estadia, mes_entrada_estadia, ano_entrada_estadia;
            int dia_saida_estadia, mes_saida_estadia, ano_saida_estadia;
            int dia_entrada_nova, mes_entrada_nova, ano_entrada_nova;
            int dia_saida_nova, mes_saida_nova, ano_saida_nova;

            sscanf(Estadias[i].data_entrada, "%d/%d/%d", &dia_entrada_estadia, &mes_entrada_estadia, &ano_entrada_estadia);
            sscanf(Estadias[i].data_saida, "%d/%d/%d", &dia_saida_estadia, &mes_saida_estadia, &ano_saida_estadia);
            sscanf(data_entrada, "%d/%d/%d", &dia_entrada_nova, &mes_entrada_nova, &ano_entrada_nova);
            sscanf(data_saida, "%d/%d/%d", &dia_saida_nova, &mes_saida_nova, &ano_saida_nova);

            int dias_entrada_estadia = ano_entrada_estadia * 365 + mes_entrada_estadia * 30 + dia_entrada_estadia;
            int dias_saida_estadia = ano_saida_estadia * 365 + mes_saida_estadia * 30 + dia_saida_estadia;
            int dias_entrada_nova = ano_entrada_nova * 365 + mes_entrada_nova * 30 + dia_entrada_nova;
            int dias_saida_nova = ano_saida_nova * 365 + mes_saida_nova * 30 + dia_saida_nova;

            if (!(dias_saida_nova <= dias_entrada_estadia || dias_entrada_nova >= dias_saida_estadia)) {
                return 0;
            }
        }
    }
    return 1;
}

int cadastrar_estadia(int codigo_cliente, int numero_hospedes, char data_entrada[], char data_saida[]) {
    if (numero_cliente == 0) {
        printf("Erro: Nenhum cliente registrado. Redirecionando para o menu...\n");
        return 0;
    }

    if (numero_quarto == 0) {
        printf("Erro: Nenhum quarto registrado. Redirecionando para o menu...\n");
        return 0;
    }

    int i, j;
    for (i = 0; i < numero_cliente; i++) {
        if (Clientes[i].codigo == codigo_cliente) {
            printf("Quartos disponíveis:\n");
            for (j = 0; j < numero_quarto; j++) {
                if (Quartos[j].numero_hospedes >= numero_hospedes && strcmp(Quartos[j].status, "desocupado") == 0) {
                    if (verificar_disponibilidade_quarto(Quartos[j].numero, data_entrada, data_saida)) {
                        printf("Número do Quarto: %d, Capacidade: %d, Valor da Diária: %.2f\n", Quartos[j].numero, Quartos[j].numero_hospedes, Quartos[j].valor_diario);
                    }
                }
            }

            int numero_quarto_escolhido;
            printf("Digite o número do quarto desejado: ");
            scanf("%d", &numero_quarto_escolhido);

            for (j = 0; j < numero_quarto; j++) {
                if (Quartos[j].numero == numero_quarto_escolhido) {
                    if (verificar_disponibilidade_quarto(Quartos[j].numero, data_entrada, data_saida)) {
                        int qtd_diarias = calcular_diarias(data_entrada, data_saida);
                        estadia e;
                        e.codigo = numero_estadia + 1;
                        strcpy(e.data_entrada, data_entrada);
                        strcpy(e.data_saida, data_saida);
                        e.codigo_cliente = codigo_cliente;
                        e.numero_quarto = Quartos[j].numero;
                        Estadias[numero_estadia++] = e;
                        strcpy(Quartos[j].status, "ocupado");
                        printf("Estadia cadastrada com sucesso no quarto %d.\n", Quartos[j].numero);
                        printf("Número da estadia: %d\n", e.codigo);
                        return 1;
                    }
                }
            }

            printf("Nenhum quarto disponível para as datas e quantidade de hóspedes solicitados.\n");
            return 0;
        }
    }

    printf("Cliente com código %d não encontrado.\n", codigo_cliente);
    return 0;
}


int dar_baixa_estadia(int codigo_estadia) { //
    int i, j;

    for (i = 0; i < numero_estadia; i++) {
        if (Estadias[i].codigo == codigo_estadia) {
            quarto *quarto = NULL;
            // Encontrar o quarto correspondente à estadia
            for (j = 0; j < numero_quarto; j++) {
                if (Quartos[j].numero == Estadias[i].numero_quarto) {
                    quarto = &Quartos[j];
                    break;
                }
            }
            if (quarto != NULL) {
                int qtd_diarias = calcular_diarias(Estadias[i].data_entrada, Estadias[i].data_saida);
                float valor_total = qtd_diarias * quarto->valor_diario;
                strcpy(quarto->status, "desocupado");
                for (int k = i; k < numero_estadia - 1; k++) {
                    Estadias[k] = Estadias[k + 1];
                }
                numero_estadia--;
                printf("Estadia encerrada. Valor total a ser pago pelo cliente %d: R$%.2f.\n", Estadias[i].codigo_cliente, valor_total);
                return 1;
            }
        }
    }
    // Se não encontre a estadia
    printf("Estadia com código %d não encontrada.\n", codigo_estadia);
    return 0;
}

void pesquisar_cliente_por_codigo() {
    int codigo;
    printf("Digite o código do cliente: ");
    scanf("%d", &codigo);
    int cliente_encontrado = 0;
    for (int i = 0; i < numero_cliente; i++) {
        if (Clientes[i].codigo == codigo) {
            printf("Cliente encontrado: ");
            printf("Código: %d, ", Clientes[i].codigo);
            printf("Nome: %s, ", Clientes[i].nome);
            printf("Endereço: %s, ", Clientes[i].endereco);
            printf("Telefone: %d\n", Clientes[i].telefone);
            cliente_encontrado = 1;
            break;
        }
    }

    if (!cliente_encontrado) {
        printf("Cliente com código %d não encontrado.\n", codigo);
        return;
    }

    printf("Estadias do cliente %d:\n", codigo);
    int estadias_encontradas = 0;
    for (int i = 0; i < numero_estadia; i++) {
        if (Estadias[i].codigo_cliente == codigo) {
            printf("Código da Estadia: %d, ", Estadias[i].codigo);
            printf("Data de Entrada: %s, ", Estadias[i].data_entrada);
            printf("Data de Saída: %s, ", Estadias[i].data_saida);
            printf("Número do Quarto: %d\n", Estadias[i].numero_quarto);
            estadias_encontradas = 1;
        }
    }

    if (!estadias_encontradas) {
        printf("Nenhuma estadia encontrada para o cliente %d.\n", codigo);
    }
}

void pesquisar_cliente_por_nome() {
    char nome[100];
    printf("Digite o nome do cliente: ");
    scanf(" %[^\n]", nome);
    int cliente_encontrado = 0;

    for (int i = 0; i < numero_cliente; i++) {
        if (strcmp(Clientes[i].nome, nome) == 0) {
            cliente_encontrado = 1;
            printf("Cliente encontrado: ");
            printf("Código: %d, ", Clientes[i].codigo);
            printf("Nome: %s, ", Clientes[i].nome);
            printf("Endereço: %s, ", Clientes[i].endereco);
            printf("Telefone: %d\n", Clientes[i].telefone);
            printf("Estadias:\n");

            int estadia_encontrada = 0;
            for (int j = 0; j < numero_estadia; j++) {
                if (Estadias[j].codigo_cliente == Clientes[i].codigo) {
                    estadia_encontrada = 1;
                    printf("Código da Estadia: %d, ", Estadias[j].codigo);
                    printf("Data de Entrada: %s, ", Estadias[j].data_entrada);
                    printf("Data de Saída: %s, ", Estadias[j].data_saida);
                    printf("Número do Quarto: %d\n", Estadias[j].numero_quarto);
                }
            }
            if (!estadia_encontrada) {
                printf("Nenhuma estadia encontrada para este cliente.\n");
            }
        }
    }

    if (!cliente_encontrado) {
        printf("Cliente com nome %s não encontrado.\n", nome);
    }
}


void pesquisar_funcionario_por_codigo() {
    int codigo;
    printf("Digite o código do funcionário: ");
    scanf("%d", &codigo);
    for (int i = 0; i < numero_funcionario; i++) {
        if (Funcionarios[i].codigo == codigo) {
            printf("Funcionário encontrado:\n");
            printf("Código: %d, ", Funcionarios[i].codigo);
            printf("Nome: %s, ", Funcionarios[i].nome);
            printf("Telefone: %d, ", Funcionarios[i].telefone);
            printf("Cargo: %s, ", Funcionarios[i].cargo);
            printf("Salário: %.2f\n", Funcionarios[i].salario);
            return;
        }
    }
    printf("Funcionário com código %d não encontrado.\n", codigo);
}

void pesquisar_funcionario_por_nome() {
    char nome[100];
    printf("Digite o nome do funcionário: ");
    scanf(" %[^\n]", nome);
    for (int i = 0; i < numero_funcionario; i++) {
        if (strcmp(Funcionarios[i].nome, nome) == 0) {
            printf("Funcionário encontrado: ");
            printf("Código: %d, ", Funcionarios[i].codigo);
            printf("Nome: %s, ", Funcionarios[i].nome);
            printf("Telefone: %d, ", Funcionarios[i].telefone);
            printf("Cargo: %s, ", Funcionarios[i].cargo);
            printf("Salário: %.2f\n", Funcionarios[i].salario);
            return;
        }
    }
    printf("Funcionário com nome %s não encontrado.\n", nome);
}

int main() {
    setlocale(LC_ALL, "Portuguese");
    int op;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Cadastrar Cliente\n");
        printf("2. Cadastrar Funcionário\n");
        printf("3. Cadastrar Quarto\n");
        printf("4. Cadastrar Estadia\n");
        printf("5. Pesquisar Cliente\n");
        printf("6. Pesquisar Funcionário\n");
        printf("7. Dar Baixa em  uma Estadia\n");
        printf("8. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &op);

        if (op == 8) {
            break;
        }

        int codigo, telefone, numero_quarto, numero_hospedes, codigo_cliente, codigo_estadia;
        char nome[100], endereco[200], cargo[100], data_entrada[100], data_saida[100];
        float salario, valor_diario;

        switch (op) {
            case 1:
                printf("Digite o código do cliente: ");
                scanf("%d", &codigo);
                printf("Digite o nome do cliente: ");
                scanf(" %[^\n]%*c", nome);
                printf("Digite o endereço do cliente: ");
                scanf(" %[^\n]%*c", endereco);
                printf("Digite o telefone do cliente: ");
                scanf("%d", &telefone);
                cadastro_de_cliente(codigo, nome, endereco, telefone);
                break;
            case 2:
                printf("Digite o código do funcionário: ");
                scanf("%d", &codigo);
                printf("Digite o nome do funcionário: ");
                scanf(" %[^\n]%*c", nome);
                printf("Digite o telefone do funcionário: ");
                scanf("%d", &telefone);
                printf("Digite o cargo do funcionário: ");
                scanf(" %[^\n]%*c", cargo);
                printf("Digite o salário do funcionário: ");
                scanf("%f", &salario);
                cadastro_de_funcionario(codigo, nome, telefone, cargo, salario);
                break;
            case 3:
                printf("Digite o número do quarto: ");
                scanf("%d", &numero_quarto);
                printf("Digite a quantidade de hóspedes: ");
                scanf("%d", &numero_hospedes);
                printf("Digite o valor da diária: ");
                scanf("%f", &valor_diario);
                cadastrar_quarto(numero_quarto, numero_hospedes, valor_diario);
                break;
            case 4:
    printf("Digite o código do cliente: ");
    scanf("%d", &codigo_cliente);
    printf("Digite a quantidade de hóspedes: ");
    scanf("%d", &numero_hospedes);
    printf("Digite a data de entrada (dd/mm/aaaa): ");
    scanf(" %[^\n]%*c", data_entrada);
    printf("Digite a data de saída (dd/mm/aaaa): ");
    scanf(" %[^\n]%*c", data_saida);
    cadastrar_estadia(codigo_cliente, numero_hospedes, data_entrada, data_saida);
    break;
            case 5: {
                int escolha_pesquisa;
                printf("1. Pesquisar cliente por código\n");
                printf("2. Pesquisar cliente por nome\n");
                printf("Escolha uma opção: ");
                scanf("%d", &escolha_pesquisa);
                if (escolha_pesquisa == 1) {
                    pesquisar_cliente_por_codigo();
                } else if (escolha_pesquisa == 2) {
                    pesquisar_cliente_por_nome();
                } else {
                    printf("Opção inválida.\n");
                }
                break;
            }
            case 6: {
                int escolha_pesquisa;
                printf("1. Pesquisar funcionário por código\n");
                printf("2. Pesquisar funcionário por nome\n");
                printf("Escolha uma opção: ");
                scanf("%d", &escolha_pesquisa);
                if (escolha_pesquisa == 1) {
                    pesquisar_funcionario_por_codigo();
                } else if (escolha_pesquisa == 2) {
                    pesquisar_funcionario_por_nome();
                } else {
                    printf("Opção inválida.\n");
                }
                break;
            }
             case 7:
                printf("Digite o código da estadia: ");
                scanf("%d", &codigo_estadia);
                dar_baixa_estadia(codigo_estadia);
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    }


    return 0;
}
